from . import api as api
from .utils import fix_job_def as fix_job_def, pop_trigger as pop_trigger
from _typeshed import Incomplete

LOGGER: Incomplete

class APScheduler:
    allowed_hosts: Incomplete
    auth: Incomplete
    api_enabled: bool
    api_prefix: str
    endpoint_prefix: str
    app: Incomplete
    def __init__(self, scheduler: Incomplete | None = None, app: Incomplete | None = None) -> None: ...
    @property
    def host_name(self): ...
    @property
    def running(self): ...
    @property
    def state(self): ...
    @property
    def scheduler(self): ...
    @property
    def task(self): ...
    def init_app(self, app) -> None: ...
    def start(self, paused: bool = False) -> None: ...
    def shutdown(self, wait: bool = True) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def add_listener(self, callback, mask=...) -> None: ...
    def remove_listener(self, callback) -> None: ...
    def add_job(self, id, func, **kwargs): ...
    def remove_job(self, id, jobstore: Incomplete | None = None) -> None: ...
    def remove_all_jobs(self, jobstore: Incomplete | None = None) -> None: ...
    def get_job(self, id, jobstore: Incomplete | None = None): ...
    def get_jobs(self, jobstore: Incomplete | None = None): ...
    def modify_job(self, id, jobstore: Incomplete | None = None, **changes): ...
    def pause_job(self, id, jobstore: Incomplete | None = None) -> None: ...
    def resume_job(self, id, jobstore: Incomplete | None = None) -> None: ...
    def run_job(self, id, jobstore: Incomplete | None = None) -> None: ...
    def authenticate(self, func): ...
