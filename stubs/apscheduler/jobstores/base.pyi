from abc import ABCMeta, abstractmethod

class JobLookupError(KeyError):
    def __init__(self, job_id) -> None: ...

class ConflictingIdError(KeyError):
    def __init__(self, job_id) -> None: ...

class TransientJobError(ValueError):
    def __init__(self, job_id) -> None: ...

class BaseJobStore(metaclass=ABCMeta):
    def start(self, scheduler, alias) -> None: ...
    def shutdown(self) -> None: ...
    @abstractmethod
    def lookup_job(self, job_id): ...
    @abstractmethod
    def get_due_jobs(self, now): ...
    @abstractmethod
    def get_next_run_time(self): ...
    @abstractmethod
    def get_all_jobs(self): ...
    @abstractmethod
    def add_job(self, job): ...
    @abstractmethod
    def update_job(self, job): ...
    @abstractmethod
    def remove_job(self, job_id): ...
    @abstractmethod
    def remove_all_jobs(self): ...
