from _typeshed import Incomplete

__all__ = [
    "AllExpression",
    "RangeExpression",
    "WeekdayRangeExpression",
    "WeekdayPositionExpression",
    "LastDayOfMonthExpression",
]

class AllExpression:
    value_re: Incomplete
    step: Incomplete
    def __init__(self, step: Incomplete | None = None) -> None: ...
    def validate_range(self, field_name) -> None: ...
    def get_next_value(self, date, field): ...
    def __eq__(self, other): ...

class RangeExpression(AllExpression):
    value_re: Incomplete
    first: Incomplete
    last: Incomplete
    def __init__(self, first, last: Incomplete | None = None, step: Incomplete | None = None) -> None: ...
    def validate_range(self, field_name) -> None: ...
    def get_next_value(self, date, field): ...
    def __eq__(self, other): ...

class MonthRangeExpression(RangeExpression):
    value_re: Incomplete
    def __init__(self, first, last: Incomplete | None = None) -> None: ...

class WeekdayRangeExpression(RangeExpression):
    value_re: Incomplete
    def __init__(self, first, last: Incomplete | None = None) -> None: ...

class WeekdayPositionExpression(AllExpression):
    options: Incomplete
    value_re: Incomplete
    option_num: Incomplete
    weekday: Incomplete
    def __init__(self, option_name, weekday_name) -> None: ...
    def get_next_value(self, date, field): ...
    def __eq__(self, other): ...

class LastDayOfMonthExpression(AllExpression):
    value_re: Incomplete
    def __init__(self) -> None: ...
    def get_next_value(self, date, field): ...
